<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Application Security Dashboard</title>
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .chart-container {
            width: 100%;
            height: 300px; /* Adjust as needed */
            margin-bottom: 2rem;
            border-radius: 0.5rem;
            background-color: white;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .threat-log-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow-x: auto; /* Handle horizontal scrolling for small screens */
        }
        .threat-log-table thead th {
            background-color: #f7fafc;
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
            border-bottom: 1px solid #e2e8f0;
        }
        .threat-log-table tbody td {
            padding: 0.75rem;
            border-bottom: 1px solid #e2e8f0;
        }
        .threat-log-table tbody tr:hover {
            background-color: #edf2f7;
        }
        .severity-critical {
            color: #f56565; /* Red */
        }
        .severity-high {
            color: #ed8936; /* Orange */
        }
        .severity-medium {
            color: #f6e05e; /* Yellow */
        }
        .severity-low {
            color: #48bb78; /* Green */
        }
    </style>
</head>
<body class="bg-gray-100 p-6">
    <div class="container mx-auto">
        <h1 class="text-3xl font-semibold text-gray-800 mb-8 text-center">Application Security Dashboard</h1>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Total Active Threats</h2>
                <div id="total-active-threats" class="text-2xl font-bold text-red-500">0</div>
            </div>
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold text-gray-700 mb-2">High Severity Threats</h2>
                <div id="high-severity-threats" class="text-2xl font-bold text-orange-500">0</div>
            </div>
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Attacked Applications</h2>
                <div id="top-attacked-applications" class="text-xl font-bold text-blue-500">N/A</div>
            </div>
             <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Vulnerability Exploits</h2>
                <div id="vulnerability-exploits" class="text-2xl font-bold text-red-500">0</div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <div class="chart-container">
                <h2 class="text-lg font-semibold text-gray-700 mb-4">Application Attack Timeline</h2>
                <canvas id="attack-timeline-chart"></canvas>
            </div>
            <div class="chart-container">
                <h2 class="text-lg font-semibold text-gray-700 mb-4">Attack Types</h2>
                <canvas id="attack-type-chart"></canvas>
            </div>
        </div>

        <div class="chart-container">
            <h2 class="text-lg font-semibold text-gray-700 mb-4">Geographic Origin of Attacks</h2>
            <div id="attack-map" style="width: 100%; height: 300px;">
                <div class="flex items-center justify-center h-full bg-gray-200 rounded-md">
                    <span class="text-gray-500">Map Visualization (Placeholder)</span>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-4">
            <h2 class="text-lg font-semibold text-gray-700 mb-4">Threat Log</h2>
            <table class="threat-log-table">
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Application</th>
                        <th>Severity</th>
                        <th>Type</th>
                        <th>Source IP</th>
                        <th>Target URL</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody id="threat-log-body">
                    </tbody>
            </table>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // --- Data Processing (Simulated) ---
        function parseAndAnalyzeLogs(logs) {
            const threats = [];
            // In a real application, this would involve more sophisticated parsing and analysis.
            //  This is a SIMPLIFIED example for demonstration.
            logs.forEach(log => {
                if (log.message.includes("SQL Injection") || log.message.includes("XSS")) {
                    let severity = log.message.includes("CRITICAL") ? "critical" :
                                   log.message.includes("HIGH")     ? "high"     : "medium";
                    let threatType = log.message.includes("SQL Injection") ? "SQL Injection" : "XSS";
                    threats.push({
                        timestamp: log.timestamp,
                        application: log.application,
                        severity: severity,
                        type: threatType,
                        sourceIp: log.sourceIp,
                        targetUrl: log.targetUrl,
                        description: log.message
                    });
                }
            });
            return threats;
        }

        // --- Data Simulation ---
        function generateFakeLogs() {
            const applications = ['App1', 'App2', 'App3'];
            const sourceIps = ['192.168.1.100', '10.0.0.5', '203.0.113.20'];
            const targetUrls = ['/api/data', '/admin/login', '/public/resource'];
            const messages = [
                "CRITICAL - SQL Injection attempt on /api/data",
                "HIGH - XSS attack on /admin/login",
                "MEDIUM - Potential SQL Injection on /public/resource",
                "LOW - User authentication failure",
                "INFO - Successful login to /admin/login",
                "HIGH - Possible XSS in input field on /api/data",
                "MEDIUM - Suspicious activity on /public/resource",
                "CRITICAL - SQL Injection attempt on /api/data",
                "HIGH - XSS attack on /admin/login",
                "MEDIUM - Potential SQL Injection on /public/resource",
            ];
            const logs = [];
            for (let i = 0; i < 50; i++) { // Generate 50 fake logs
                logs.push({
                    timestamp: new Date(Date.now() - i * 60000).toISOString(), // Last minute
                    application: applications[Math.floor(Math.random() * applications.length)],
                    sourceIp: sourceIps[Math.floor(Math.random() * sourceIps.length)],
                    targetUrl: targetUrls[Math.floor(Math.random() * targetUrls.length)],
                    message: messages[Math.floor(Math.random() * messages.length)],
                });
            }
            return logs;
        }

        // --- Dashboard Update Functions ---

        function updateDashboard(threats) {
            let totalActiveThreats = threats.length;
            let highSeverityThreats = threats.filter(t => t.severity === 'high' || t.severity === 'critical').length;
            let attackedApplications = [...new Set(threats.map(t => t.application))].join(', ');
             if (attackedApplications === '')
                attackedApplications = "N/A";
            let vulnerabilityExploits = threats.filter(t => t.type === 'SQL Injection' || t.type === 'XSS').length;


            document.getElementById('total-active-threats').textContent = totalActiveThreats;
            document.getElementById('high-severity-threats').textContent = highSeverityThreats;
            document.getElementById('top-attacked-applications').textContent = attackedApplications;
            document.getElementById('vulnerability-exploits').textContent = vulnerabilityExploits;

            updateThreatLog(threats);
            updateAttackTimelineChart(threats);
            updateAttackTypeChart(threats);
            //updateAttackMap(threats); //  Placeholder
        }

        function updateThreatLog(threats) {
            const threatLogBody = document.getElementById('threat-log-body');
            threatLogBody.innerHTML = ''; // Clear existing log entries
            threats.forEach(threat => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${threat.timestamp}</td>
                    <td>${threat.application}</td>
                    <td class="severity-${threat.severity}">${threat.severity}</td>
                    <td>${threat.type}</td>
                    <td>${threat.sourceIp}</td>
                    <td>${threat.targetUrl}</td>
                    <td>${threat.description}</td>
                `;
                threatLogBody.appendChild(row);
            });
        }

        // --- Chart.js ---
        let attackTimelineChartInstance = null;
        function updateAttackTimelineChart(threats) {
            const timelineCtx = document.getElementById('attack-timeline-chart').getContext('2d');
            const timelineData = {};
             threats.forEach(threat => {
                const hour = new Date(threat.timestamp).getHours();
                const hourString = `${hour.toString().padStart(2, '0')}:00`; // 00:00, 01:00, etc.
                timelineData[hourString] = (timelineData[hourString] || 0) + 1;
            });

            const sortedLabels = Object.keys(timelineData).sort();
            const sortedData = sortedLabels.map(label => timelineData[label]);

            if (attackTimelineChartInstance) {
                attackTimelineChartInstance.data.labels = sortedLabels;
                attackTimelineChartInstance.data.datasets[0].data = sortedData;
                attackTimelineChartInstance.update();
            } else {
                attackTimelineChartInstance = new Chart(timelineCtx, {
                    type: 'line',
                    data: {
                        labels: sortedLabels,
                        datasets: [{
                            label: 'Attacks per Hour',
                            data: sortedData,
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }

        let attackTypeChartInstance = null;
        function updateAttackTypeChart(threats) {
            const typeCtx = document.getElementById('attack-type-chart').getContext('2d');
            const typeData = {};
            threats.forEach(threat => {
                typeData[threat.type] = (typeData[threat.type] || 0) + 1;
            });

            const labels = Object.keys(typeData);
            const data = Object.values(typeData);
            const backgroundColors = [
                'rgba(255, 99, 132, 0.6)',
                'rgba(54, 162, 235, 0.6)',
                'rgba(255, 206, 86, 0.6)',
                'rgba(75, 192, 192, 0.6)',
                'rgba(153, 102, 255, 0.6)'
            ];
            const borderColors = [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)'
            ];

            if (attackTypeChartInstance) {
                attackTypeChartInstance.data.labels = labels;
                attackTypeChartInstance.data.datasets[0].data = data;
                attackTypeChartInstance.data.datasets[0].backgroundColor = backgroundColors;
                attackTypeChartInstance.data.datasets[0].borderColor = borderColors;
                attackTypeChartInstance.update();
            } else {
                attackTypeChartInstance = new Chart(typeCtx, {
                    type: 'pie',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Attack Types',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderColor: borderColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top'
                            }
                        }
                    }
                });
            }
        }

        function updateAttackMap(threats) {
            //  Placeholder.  In a real application, you would use a mapping library
            //  like Leaflet, Google Maps, or a commercial mapping service.
            //  You'd need to geocode the source IPs to get latitude/longitude.
            const mapDiv = document.getElementById('attack-map');
             mapDiv.innerHTML = '<div class="flex items-center justify-center h-full bg-gray-200 rounded-md"><span class="text-gray-500">Map Visualization (Placeholder)</span></div>';
            console.log("Updating Attack Map (Placeholder).  Threats:", threats);
        }



        // --- Main Program ---
        function main() {
            const initialLogs = generateFakeLogs(); // Generate initial fake logs
            const initialThreats = parseAndAnalyzeLogs(initialLogs);
            updateDashboard(initialThreats);

            // Simulate real-time updates (in a real app, this would come from a server)
            setInterval(() => {
                const newLogs = generateFakeLogs(); // Generate new fake logs
                const newThreats = parseAndAnalyzeLogs(newLogs);
                updateDashboard(newThreats);
            }, 5000); // Update every 5 seconds
        }

        main(); // Start the program
    </script>
</body>
</html>
